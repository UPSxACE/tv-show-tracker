type Query {
    allGenres: [Genre!]!
    allTvShows(input: AllTvShowsInput): AllTvShowsPage!
    allActors(input: AllActorsInput): AllActorsPage!
    getActor(id: Int!): Actor
    getActorCredits(actorId: Int!): [ActorCredit!]!
    getTvShow(id: Int!): TvShow
}

type Mutation {
    registerUser(input: RegisterUserInput!): Boolean!
    loginUser(input: LoginUserInput!): JwtResponse!
    refreshToken: JwtResponse
}

type AllTvShowsPage {
    total: Int!
    content: [TvShow!]!
    pageable: Pageable!
}

input AllTvShowsInput {
    filter: AllTvShowsFilterInput,
    page: PageInput,
    order: TvShowOrderInput
}

input AllTvShowsFilterInput {
    genreId: Int,
}

type AllActorsPage {
    total: Int!
    content: [Actor!]!
    pageable: Pageable!
}

input AllActorsInput {
    page: PageInput,
    order: ActorOrderInput
}

type Genre {
    id: ID!
    name: String!
}

type TvShow {
    id: ID!
    name: String!
    overview: String
    posterUrl: String!
    popularity: Float!
    voteAverage: Float!
    numberOfSeasons: Int!
    numberOfEpisodes: Int!
    firstAirDate: String
    lastAirDate: String
    inProduction: Boolean!
    seasons: [Season!]!
    genres: [Genre!]!
    actorCredits: [ActorCredit!]!
}

input TvShowOrderInput {
    field: TvShowSortableField!
    direction: SortDirection = ASC
}

enum TvShowSortableField {
    id,
    name,
    popularity,
    voteAverage,
    firstAirDate
}

type Actor {
    id: ID!
    name: String!
    popularity: Float!
    profileUrl: String!
}

input ActorOrderInput {
    field: ActorSortableField!
    direction: SortDirection = ASC
}

enum ActorSortableField {
    id,
    name,
    popularity,
}

type ActorCredit {
    id: ID!
    actorId: Int!
    tvShowId: Int
    name: String!
    overview: String
    popularity: Float!
    character: String!
    firstAirDate: String
    firstCreditAirDate: String
    actor: Actor!
}

type Season {
    id: ID!
    seasonNumber: Int!
    name: String!
    episodeCount: Int!
    airDate: String
}

input RegisterUserInput {
    username: String!
    password: String!
    email: String!
}

input LoginUserInput {
    identifier: String!
    password: String!
}

type JwtResponse {
    accessToken: String!
}

input PageInput {
    page: Int = 0
    size: Int = 20
}

enum SortDirection {
    ASC
    DESC
}

type Pageable {
    pageNumber: Int!
    pageSize: Int!
}